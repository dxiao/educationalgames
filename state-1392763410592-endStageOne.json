{"game":{"problem":{"name":"sqlSuite","functions":{"inOrder":{"name":"inOrder","family":{"name":"tree","stage":1,"description":"For this problem, assume binary tree class called TreeNode, defined so:\n  class TreeNode:\n    index: index of the value stored at this node.\n    value: datum stored at this node.\n    left: a TreeNode subnode whose index and sub-TreeNodes' indices are all smaller than this node's index.\n    right: a TreeNode subnode whose index and sub-TreeNodes' indices are all larger than this node's index.\n"},"description":"Return a list of elements in the tree in order of ascending index","stage":1},"findSize":{"name":"findSize","family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family","description":"Find the current size of the tree rooted at the given node","stage":1},"insert":{"name":"insert","family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family","description":"Given a tree, an element and index, insert the element into the tree using the specified index","stage":1},"parseInsert":{"name":"parseInsert","family":{"name":"io","stage":1,"description":"For this problem, assume you are writing an input/output module for a small in-house database program.\n Commands are given to the module in the form of SQL-like commands."},"description":"Given a string, determine if it is an INSERT command and if so, the index and value which is asking to be inserted","stage":1},"parseSelect":{"name":"parseSelect","family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family","description":"Given a string, determine if it is a SELECT command and if so, the range of indices which it is trying to select","stage":1},"printValues":{"name":"printValues","family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family","description":"Given a list of numbers and values, print the numbers and values in a pretty way.\nOne way might print the values like so:\n  1  bcd\n  3  foobar\n  11 alice","stage":1},"nthLargest":{"name":"nthLargest","family":{"name":"final","stage":2,"description":"For these problems, you can use any submissions to the previous rounds you want, as long as you give proper credit."},"description":"Return the n largest elements in the given tree","stage":2},"sqlserver":{"name":"sqlserver","family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_nthLargest_$$.$$_family","description":"Given a SQL-like command in the following forms and a tree-based database, do the command against the database, and return the result.","stage":2}},"families":{"tree":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family","io":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family","final":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_nthLargest_$$.$$_family"}},"players":{"205091":{"id":205091,"name":"DavidXiao"},"324170":{"id":324170,"name":"Casey"},"431262":{"id":431262,"name":"Juho"},"458713":{"id":458713,"name":"lambda"},"582401":{"id":582401,"name":"Amy Zhang"},"780590":{"id":780590,"name":"kroe"},"846550":{"id":846550,"name":"Philip"},"848224":{"id":848224,"name":"Elena"},"969413":{"id":969413,"name":"Sarah W"},"999867":{"id":999867,"name":"maxg"}},"playerViews":{"205091":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091","code":"//Add your implementation (and documentation) here!\n\nfunction findTreeSize(node) {\n  var size = 0;\n  if (node.value) {\n    size++;\n  }\n  if (node.left) {\n    size += findTreeSize(node.left);\n  }\n  if (node.right) {\n    size += findTreeSIze(node.right);\n  }\n  return size;\n}"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091","code":"//Add your implementation (and documentation) here!\n\n// Assumes that indeces are unique\nfunction insertNodeInTree(node, element, index) {\n  if (node.value == undefined) {\n    node.index = index\n    node.value = value\n    return\n  } else if (node.index < index) {\n    if (node.left) {\n      return insertNodeInTree(node.left, element, index)\n    } else {\n      node.left = new TreeNode(index, element, null, null)\n    }\n  } else {\n    if (node.right) {\n      return insertNodeInTree(node.right, element, index)\n    } else {\n      node.right = new TreeNode(index, element, null, null)\n    }\n  }\n    \n}"}}},"324170":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170","code":"//Add your implementation (and documentation) here!\n// root: a TreeNode representing the root of a binary tree in which to insert the element\n// node: a TreeNode to be inserted into root\ninsert = function(root, node) {\n  if (node.value >= root.value) {\n    if (root.right != null) {\n      insert(root.right, node)\n    } else {\n      root.right = node\n  } else {\n    if (root.left != null) {\n      insert(root.left, node)\n    } else {\n      root.left = node\n    }\n  }\n}\n\n"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170","code":"//Add your implementation (and documentation) here!\n// root: The TreeNode representing the root of the tree on which to perform the in order walk\ninOrder = funtion(root) {\n  var walk = [];\n  if (root.left) {\n  \twalk.concat(inOrder(root.left)) \n  }\n  walk.append(root.value);\n  if (root.right) {\n    walk.concat(inOrder(root.right))\n  }\n  return walk;  \n}\n"}}},"431262":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262","code":"//Add your implementation (and documentation) here!\n\n// list: array of {\"number\": number, \"value\": value} objects\n\nfunction printValues(list){\n  var i;\n  for (i=0; i<list.length; i++){\n    console.log(list[i][\"number\"], list[i][\"value\"]);\n  }\n}"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262","code":"//Add your implementation (and documentation) here!\n\nfunction printBinaryTreeElement(treeNode){\n\t// recursively print the leftmost node first because it has smaller index.\n\tif (typeof treeNode.left !== \"undefined\")\n      printBinaryTreeElement(treeNode.left);\n  \t// print the current node after all left nodes and before all right nodes\n    console.log(treeNode.value);\n  \t// recursively print the rightmost node last becasue it has larger index\n\tif (typeof treeNode.right !== \"undefined\")\n      printBinaryTreeElement(treeNode.right);  \n}"}}},"458713":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713","code":"//Add your implementation (and documentation) here!\n\n\nfunction (numbers, values){\n  $.each(numbers, function(indx, item){\n    console.log(item, values[indx];\n  }\n}"}}},"582401":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401","code":"//Add your implementation (and documentation) here!\n\n\n\nfunction blah(blah, blah,blah) {\n dothis();\n  thenthis();\n  if (blah blah) {\n   dothis();\n    why is the cursor messing up;\n    blah blah;\n  } else {\n   blah blah;\n    blah blah;\n  }\n  \n}"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401","code":"//Add your implementation (and documentation) here!\n\nfunction inOrder(blah, blah) {\n blah\n blah;\n  blah;\n  //blah\n  while (blah) {\n   doblah(); \n  }\n  \n  \n}\n"},"2":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401","code":"//Add your implementation (and documentation) here!\n\n\nfunction readSQL(sql_string) {\n  \n return [index, value]\n}\n"}}},"780590":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_780590","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert"},"impls":{}},"846550":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550","code":"//Add your implementation (and documentation) here!\n// i'm confused about what to return; a list of values\n// or of treenodes themselves\n//\n// okay this doesn't work yet, but i'm a bit confused ... can't do it without an interpreter handy\n// to test my prototypes\nfunction inOrder(t) {\n  if (t.left) {\n\tvar l = inOrder(t.left);\n  }\n  if (t.right) {\n    var r = inOrder(t.right);\n  }\n  return t.value;\n}\n"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550","code":"//Add your implementation (and documentation) here!\nfunction findSize(t) {\n  if (!t) {\n    return 0;\n  }\n  else {\n    return 1 + findSize(t.left) + findSize(t.right);\n  }\n}"},"2":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550","code":"//Add your implementation (and documentation) here!\nfunction printValues(nums, vals) {\n  for (var i = 0; i < nums.length; i++) {\n   \tconsole.log('%4d %s', nums[i], vals[i]);\n  }\n}"}}},"848224":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224","code":"//Add your implementation (and documentation) here!\nfunction printValues(inputList) {\n  i=0\n  while (i <= range(len(inputList)-1)){\n  \tprint inputList[i],inputList[i+1]\n    i+=2\n  }\n}\n\n\n\n"},"1":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224","code":"//Add your implementation (and documentation) here!\nfunction findSize(myTreeNode) {\n  if myTreeNode.left==[]:\n    return 0\n  elseif myTreeNode.right==[]:\n    return 0\n  else:\n    return 1 + findSize(myTreeNode.left)+findSize(myTreeNode.right)\n}\n\n"},"2":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224","code":"//Add your implementation (and documentation) here!\nfunction parseSelect(string) {\n  if string.split(' ')[0] == 'SELECT':\n  \tprint //not sure where the indices are in a select sql command\n  else:\n    return False\n  \n}"}}},"969413":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"},"impls":{"0":{"function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413","code":"//Add your implementation (and documentation) here!\n\nfunction isSelect(str) {\n  bucket = [];\n  select_command = false;\n  for (ch in str) {\n    if (bucket.length() == 5) {\n    \tnew_str = bucket.join(\"\");\n      if (new_str == \"SELECT\") {\n      \tselect_command = true; \n      } else {\n        bucket.pop(0)\n        bucket.push(str[ch])\n      }\n    }\n  }\n  return select_command;\n}\n\n\n\n\n\n"}}},"999867":{"player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_999867","game":"_$$ND_CC$$_$_$$.$$_game","functions":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize"},"impls":{}}},"playerView2s":{},"impls":{"inOrder":{"324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_1","431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_1","582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_1","846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_0"},"findSize":{"205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_0","846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_1","848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_1"},"insert":{"205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_1","324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_0","582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_0"},"parseInsert":{"582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_2"},"parseSelect":{"848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_2","969413":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_969413_$$.$$_impls_$$.$$_0"},"printValues":{"431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_0","458713":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_458713_$$.$$_impls_$$.$$_0","846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_2","848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_0"},"nthLargest":{},"sqlserver":{}},"reviews":{"inOrder":{"324170":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}},"431262":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}},"582401":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}},"846550":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}}},"findSize":{"205091":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}},"846550":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}},"848224":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}}},"insert":{"205091":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_1","reviews":{},"rating":{"num":0,"denom":0}},"324170":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}},"582401":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}}},"parseInsert":{"582401":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_2","reviews":{},"rating":{"num":0,"denom":0}}},"parseSelect":{"848224":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_2","reviews":{},"rating":{"num":0,"denom":0}},"969413":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_969413_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}}},"printValues":{"431262":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}},"458713":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_458713_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}},"846550":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_2","reviews":{},"rating":{"num":0,"denom":0}},"848224":{"impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_0","reviews":{},"rating":{"num":0,"denom":0}}},"nthLargest":{},"sqlserver":{}},"stage":2,"nextStageSetup":"_$$ND_FUNC$$_function () {\n      var func, i, impl, name, pid, playerView, _ref, _ref1;\n      saveState(\"endStageOne\");\n      this.stageTwoAssigners = {};\n      _ref = this.problem.functions;\n      for (name in _ref) {\n        func = _ref[name];\n        if (func.stage === 1) {\n          this.stageTwoAssigners[name] = new FairAssigner((function() {\n            var _ref1, _results;\n            _ref1 = this.impls[name];\n            _results = [];\n            for (i in _ref1) {\n              impl = _ref1[i];\n              _results.push(impl);\n            }\n            return _results;\n          }).call(this));\n        }\n      }\n      _ref1 = this.playerViews;\n      for (pid in _ref1) {\n        playerView = _ref1[pid];\n        this.convertPlayerViewToStage2(playerView);\n      }\n      return saveState(\"startStageTwo\");\n    }","stageOneAssigner":{"items":{"0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder","1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize","2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert","3":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert","4":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect","5":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"},"itemsLeft":{}},"stageEndTime":1392763410572,"stageTimeout":{"_idleTimeout":1260000,"_idlePrev":null,"_idleNext":null,"_idleStart":1392762150572,"_onTimeout":"_$$ND_FUNC$$_function () {\n          return _this.startNextStage();\n        }","_repeat":false}},"gameList":{"sql":"_$$ND_CC$$_$_$$.$$_game"},"playerRegistry":{"players":{"205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091","324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170","431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262","458713":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713","582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401","780590":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_780590","846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550","848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224","969413":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413","999867":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_999867"}},"getPlayerAndGame":"_$$ND_FUNC$$_function (req, res) {\n    var id;\n    id = req.query.id;\n    game = req.params.game;\n    if (!(game in gameList)) {\n      res.send(404, \"Requested game \" + game + \" not found on this server\");\n      return [null, null];\n    }\n    if (!(id in playerRegistry.players)) {\n      res.send(403, \"Your player ID was not recognized\");\n      return [null, null];\n    }\n    return [playerRegistry.players[id], gameList[game]];\n  }"}