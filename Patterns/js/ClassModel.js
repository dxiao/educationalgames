// Generated by CoffeeScript 1.6.3
(function() {
  var Class, Field, Interface, Method, Model, ModelObject, Module, Struct, Type, copy, extend,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Module = {};

  window.ClassModel = Module;

  extend = function(obj, mixin) {
    var method, name;
    for (name in mixin) {
      method = mixin[name];
      obj[name] = method;
    }
    return obj;
  };

  copy = function(obj) {
    return extend({}, obj);
  };

  Module.Model = Model = (function() {
    function Model(types) {
      this.types = types;
    }

    return Model;

  })();

  ModelObject = (function() {
    function ModelObject(name, modifiers) {
      this.name = name;
      this.modifiers = modifiers != null ? modifiers : [];
    }

    ModelObject.prototype.toString = function() {
      return this.name + this.modifiers.join();
    };

    return ModelObject;

  })();

  Type = (function(_super) {
    __extends(Type, _super);

    function Type(name, modifiers, parents, fields, methods) {
      this.parents = parents != null ? parents : [];
      this.fields = fields != null ? fields : {};
      this.methods = methods != null ? methods : {};
      Type.__super__.constructor.call(this, name, modifiers);
    }

    return Type;

  })(ModelObject);

  Method = (function(_super) {
    __extends(Method, _super);

    function Method(name, modifiers, parameters, _return) {
      this.parameters = parameters != null ? parameters : {};
      this["return"] = _return;
      Method.__super__.constructor.call(this, name, modifiers);
    }

    return Method;

  })(ModelObject);

  Field = (function(_super) {
    __extends(Field, _super);

    function Field(name, modifiers, type) {
      this.type = type;
      Field.__super__.constructor.call(this, name, modifiers);
    }

    return Field;

  })(ModelObject);

  Struct = (function(_super) {
    __extends(Struct, _super);

    function Struct(name, modifiers, parents, fields) {
      this.parents = parents;
      this.fields = fields;
      Struct.__super__.constructor.call(this, name, modifiers, parents, fields);
    }

    return Struct;

  })(Type);

  Class = (function(_super) {
    __extends(Class, _super);

    function Class(name, modifiers, parents, fields, methods) {
      this.parents = parents;
      this.fields = fields;
      this.methods = methods;
      Class.__super__.constructor.call(this, name, modifiers, parents, fields, methods);
    }

    return Class;

  })(Type);

  Interface = (function(_super) {
    __extends(Interface, _super);

    function Interface(name, modifiers, parents, methods) {
      this.parents = parents;
      this.methods = methods;
      Interface.__super__.constructor.call(this, name, modifiers, parents, null, methods);
    }

    return Interface;

  })(Type);

}).call(this);
