{
  "game":{
    "problem":{
      "name":"sqlSuite",
      "functions":{
        "inOrder":{
          "name":"inOrder",
          "family":{
            "name":"tree",
            "stage":1,
            "description":"For this problem, assume binary tree class called TreeNode, defined so:
  class TreeNode:
    index: index of the value stored at this node.
    value: datum stored at this node.
    left: a TreeNode subnode whose index and sub-TreeNodes' indices are all smaller than this node's index.
    right: a TreeNode subnode whose index and sub-TreeNodes' indices are all larger than this node's index.
"
          },
          "description":"Return a list of elements in the tree in order of ascending index",
          "stage":1
        },
        "findSize":{
          "name":"findSize",
          "family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family",
          "description":"Find the current size of the tree rooted at the given node",
          "stage":1
        },
        "insert":{
          "name":"insert",
          "family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family",
          "description":"Given a tree, an element and index, insert the element into the tree using the specified index",
          "stage":1
        },
        "parseInsert":{
          "name":"parseInsert",
          "family":{
            "name":"io",
            "stage":1,
            "description":"For this problem, assume you are writing an input/output module for a small in-house database program.
 Commands are given to the module in the form of SQL-like commands."
          },
          "description":"Given a string, determine if it is an INSERT command and if so, the index and value which is asking to be inserted",
          "stage":1
        },
        "parseSelect":{
          "name":"parseSelect",
          "family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family",
          "description":"Given a string, determine if it is a SELECT command and if so, the range of indices which it is trying to select",
          "stage":1
        },
        "printValues":{
          "name":"printValues",
          "family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family",
          "description":"Given a list of numbers and values, print the numbers and values in a pretty way.
One way might print the values like so:
  1  bcd
  3  foobar
  11 alice",
          "stage":1
        },
        "nthLargest":{
          "name":"nthLargest",
          "family":{
            "name":"final",
            "stage":2,
            "description":"For these problems, you can use any submissions to the previous rounds you want, as long as you give proper credit."
          },
          "description":"Return the n largest elements in the given tree",
          "stage":2
        },
        "sqlserver":{
          "name":"sqlserver",
          "family":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_nthLargest_$$.$$_family",
          "description":"Given a SQL-like command in the following forms and a tree-based database, do the command against the database, and return the result.",
          "stage":2
        }
      },
      "families":{
        "tree":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder_$$.$$_family",
        "io":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert_$$.$$_family",
        "final":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_nthLargest_$$.$$_family"
      }
    },
    "players":{
      "205091":{
        "id":205091,
        "name":"DavidXiao"
      },
      "324170":{
        "id":324170,
        "name":"Casey"
      },
      "431262":{
        "id":431262,
        "name":"Juho"
      },
      "458713":{
        "id":458713,
        "name":"lambda"
      },
      "582401":{
        "id":582401,
        "name":"Amy Zhang"
      },
      "780590":{
        "id":780590,
        "name":"kroe"
      },
      "846550":{
        "id":846550,
        "name":"Philip"
      },
      "848224":{
        "id":848224,
        "name":"Elena"
      },
      "969413":{
        "id":969413,
        "name":"Sarah W"
      },
      "999867":{
        "id":999867,
        "name":"maxg"
      }
    },
    "playerViews":{
      "205091":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091",
            "code":"//Add your implementation (and documentation) here!

function findTreeSize(node) {
  var size = 0;
  if (node.value) {
    size++;
  }
  if (node.left) {
    size += findTreeSize(node.left);
  }
  if (node.right) {
    size += findTreeSIze(node.right);
  }
  return size;
}"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091",
            "code":"//Add your implementation (and documentation) here!

// Assumes that indeces are unique
function insertNodeInTree(node, element, index) {
  if (node.value == undefined) {
    node.index = index
    node.value = value
    return
  } else if (node.index < index) {
    if (node.left) {
      return insertNodeInTree(node.left, element, index)
    } else {
      node.left = new TreeNode(index, element, null, null)
    }
  } else {
    if (node.right) {
      return insertNodeInTree(node.right, element, index)
    } else {
      node.right = new TreeNode(index, element, null, null)
    }
  }
    
}"
          }
        }
      },
      "324170":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170",
            "code":"//Add your implementation (and documentation) here!
// root: a TreeNode representing the root of a binary tree in which to insert the element
// node: a TreeNode to be inserted into root
insert = function(root, node) {
  if (node.value >= root.value) {
    if (root.right != null) {
      insert(root.right, node)
    } else {
      root.right = node
  } else {
    if (root.left != null) {
      insert(root.left, node)
    } else {
      root.left = node
    }
  }
}

"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170",
            "code":"//Add your implementation (and documentation) here!
// root: The TreeNode representing the root of the tree on which to perform the in order walk
inOrder = funtion(root) {
  var walk = [];
  if (root.left) {
  \twalk.concat(inOrder(root.left)) 
  }
  walk.append(root.value);
  if (root.right) {
    walk.concat(inOrder(root.right))
  }
  return walk;  
}
"
          }
        }
      },
      "431262":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262",
            "code":"//Add your implementation (and documentation) here!

// list: array of {\"number\": number, \"value\": value} objects

function printValues(list){
  var i;
  for (i=0; i<list.length; i++){
    console.log(list[i][\"number\"], list[i][\"value\"]);
  }
}"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262",
            "code":"//Add your implementation (and documentation) here!

function printBinaryTreeElement(treeNode){
\t// recursively print the leftmost node first because it has smaller index.
\tif (typeof treeNode.left !== \"undefined\")
      printBinaryTreeElement(treeNode.left);
  \t// print the current node after all left nodes and before all right nodes
    console.log(treeNode.value);
  \t// recursively print the rightmost node last becasue it has larger index
\tif (typeof treeNode.right !== \"undefined\")
      printBinaryTreeElement(treeNode.right);  
}"
          }
        }
      },
      "458713":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713",
            "code":"//Add your implementation (and documentation) here!


function (numbers, values){
  $.each(numbers, function(indx, item){
    console.log(item, values[indx];
  }
}"
          }
        }
      },
      "582401":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401",
            "code":"//Add your implementation (and documentation) here!



function blah(blah, blah,blah) {
 dothis();
  thenthis();
  if (blah blah) {
   dothis();
    why is the cursor messing up;
    blah blah;
  } else {
   blah blah;
    blah blah;
  }
  
}"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401",
            "code":"//Add your implementation (and documentation) here!

function inOrder(blah, blah) {
 blah
 blah;
  blah;
  //blah
  while (blah) {
   doblah(); 
  }
  
  
}
"
          },
          "2":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401",
            "code":"//Add your implementation (and documentation) here!


function readSQL(sql_string) {
  
 return [index, value]
}
"
          }
        }
      },
      "780590":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_780590",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert"
        },
        "impls":{

        }
      },
      "846550":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550",
            "code":"//Add your implementation (and documentation) here!
// i'm confused about what to return; a list of values
// or of treenodes themselves
//
// okay this doesn't work yet, but i'm a bit confused ... can't do it without an interpreter handy
// to test my prototypes
function inOrder(t) {
  if (t.left) {
\tvar l = inOrder(t.left);
  }
  if (t.right) {
    var r = inOrder(t.right);
  }
  return t.value;
}
"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550",
            "code":"//Add your implementation (and documentation) here!
function findSize(t) {
  if (!t) {
    return 0;
  }
  else {
    return 1 + findSize(t.left) + findSize(t.right);
  }
}"
          },
          "2":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550",
            "code":"//Add your implementation (and documentation) here!
function printValues(nums, vals) {
  for (var i = 0; i < nums.length; i++) {
   \tconsole.log('%4d %s', nums[i], vals[i]);
  }
}"
          }
        }
      },
      "848224":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224",
            "code":"//Add your implementation (and documentation) here!
function printValues(inputList) {
  i=0
  while (i <= range(len(inputList)-1)){
  \tprint inputList[i],inputList[i+1]
    i+=2
  }
}



"
          },
          "1":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224",
            "code":"//Add your implementation (and documentation) here!
function findSize(myTreeNode) {
  if myTreeNode.left==[]:
    return 0
  elseif myTreeNode.right==[]:
    return 0
  else:
    return 1 + findSize(myTreeNode.left)+findSize(myTreeNode.right)
}

"
          },
          "2":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224",
            "code":"//Add your implementation (and documentation) here!
function parseSelect(string) {
  if string.split(' ')[0] == 'SELECT':
  \tprint //not sure where the indices are in a select sql command
  else:
    return False
  
}"
          }
        }
      },
      "969413":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"
        },
        "impls":{
          "0":{
            "function":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
            "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413",
            "code":"//Add your implementation (and documentation) here!

function isSelect(str) {
  bucket = [];
  select_command = false;
  for (ch in str) {
    if (bucket.length() == 5) {
    \tnew_str = bucket.join(\"\");
      if (new_str == \"SELECT\") {
      \tselect_command = true; 
      } else {
        bucket.pop(0)
        bucket.push(str[ch])
      }
    }
  }
  return select_command;
}





"
          }
        }
      },
      "999867":{
        "player":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_999867",
        "game":"_$$ND_CC$$_$_$$.$$_game",
        "functions":{
          "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
          "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
          "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize"
        },
        "impls":{

        }
      }
    },
    "playerView2s":{

    },
    "impls":{
      "inOrder":{
        "324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_1",
        "431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_1",
        "582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_1",
        "846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_0"
      },
      "findSize":{
        "205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_0",
        "846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_1",
        "848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_1"
      },
      "insert":{
        "205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_1",
        "324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_0",
        "582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_0"
      },
      "parseInsert":{
        "582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_2"
      },
      "parseSelect":{
        "848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_2",
        "969413":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_969413_$$.$$_impls_$$.$$_0"
      },
      "printValues":{
        "431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_0",
        "458713":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_458713_$$.$$_impls_$$.$$_0",
        "846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_2",
        "848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_0"
      },
      "nthLargest":{

      },
      "sqlserver":{

      }
    },
    "reviews":{
      "inOrder":{
        "324170":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "431262":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "582401":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "846550":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "findSize":{
        "205091":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "846550":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "848224":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "insert":{
        "205091":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_205091_$$.$$_impls_$$.$$_1",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "324170":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_324170_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "582401":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "parseInsert":{
        "582401":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_582401_$$.$$_impls_$$.$$_2",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "parseSelect":{
        "848224":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_2",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "969413":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_969413_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "printValues":{
        "431262":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_431262_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "458713":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_458713_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "846550":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_846550_$$.$$_impls_$$.$$_2",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        },
        "848224":{
          "impl":"_$$ND_CC$$_$_$$.$$_game_$$.$$_playerViews_$$.$$_848224_$$.$$_impls_$$.$$_0",
          "reviews":{

          },
          "rating":{
            "num":0,
            "denom":0
          }
        }
      },
      "nthLargest":{

      },
      "sqlserver":{

      }
    },
    "stage":2,
    "nextStageSetup":"_$$ND_FUNC$$_function () {
      var func, i, impl, name, pid, playerView, _ref, _ref1;
      saveState(\"endStageOne\");
      this.stageTwoAssigners = {};
      _ref = this.problem.functions;
      for (name in _ref) {
        func = _ref[name];
        if (func.stage === 1) {
          this.stageTwoAssigners[name] = new FairAssigner((function() {
            var _ref1, _results;
            _ref1 = this.impls[name];
            _results = [];
            for (i in _ref1) {
              impl = _ref1[i];
              _results.push(impl);
            }
            return _results;
          }).call(this));
        }
      }
      _ref1 = this.playerViews;
      for (pid in _ref1) {
        playerView = _ref1[pid];
        this.convertPlayerViewToStage2(playerView);
      }
      return saveState(\"startStageTwo\");
    }",
    "stageOneAssigner":{
      "items":{
        "0":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_inOrder",
        "1":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_findSize",
        "2":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_insert",
        "3":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseInsert",
        "4":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_parseSelect",
        "5":"_$$ND_CC$$_$_$$.$$_game_$$.$$_problem_$$.$$_functions_$$.$$_printValues"
      },
      "itemsLeft":{

      }
    },
    "stageEndTime":1392763410572,
    "stageTimeout":{
      "_idleTimeout":1260000,
      "_idlePrev":null,
      "_idleNext":null,
      "_idleStart":1392762150572,
      "_onTimeout":"_$$ND_FUNC$$_function () {
          return _this.startNextStage();
        }",
      "_repeat":false
    }
  },
  "gameList":{
    "sql":"_$$ND_CC$$_$_$$.$$_game"
  },
  "playerRegistry":{
    "players":{
      "205091":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_205091",
      "324170":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_324170",
      "431262":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_431262",
      "458713":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_458713",
      "582401":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_582401",
      "780590":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_780590",
      "846550":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_846550",
      "848224":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_848224",
      "969413":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_969413",
      "999867":"_$$ND_CC$$_$_$$.$$_game_$$.$$_players_$$.$$_999867"
    }
  },
  "getPlayerAndGame":"_$$ND_FUNC$$_function (req, res) {
    var id;
    id = req.query.id;
    game = req.params.game;
    if (!(game in gameList)) {
      res.send(404, \"Requested game \" + game + \" not found on this server\");
      return [null, null];
    }
    if (!(id in playerRegistry.players)) {
      res.send(403, \"Your player ID was not recognized\");
      return [null, null];
    }
    return [playerRegistry.players[id], gameList[game]];
  }"
}
