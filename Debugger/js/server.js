// Generated by CoffeeScript 1.6.3
(function() {
  var Model, PROBLEM_TIMEOUT, ProblemInstance, ProblemTemplate, ProblemsManager, express, fs, getProgramLinesFromFile, http, idCounter, problemNames, problemsManager;

  express = require("express");

  http = require("http");

  fs = require("fs");

  Model = require("./DebuggerModel.coffee");

  PROBLEM_TIMEOUT = 2 * 60 * 1000;

  idCounter = 0;

  problemNames = ["problem"];

  getProgramLinesFromFile = function(fileName) {
    var i, line;
    return (function() {
      var _i, _len, _ref, _results;
      _ref = fs.readFileSync(__dirname + "/" + fileName, {
        encoding: "utf8"
      }).split("\n");
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        line = _ref[i];
        _results.push(new Model.Line(line, i));
      }
      return _results;
    })();
  };

  ProblemTemplate = (function() {
    function ProblemTemplate(name) {
      this.name = name;
      this.program = getProgramLinesFromFile(this.name + ".js");
    }

    return ProblemTemplate;

  })();

  ProblemInstance = (function() {
    function ProblemInstance(template) {
      this.template = template;
      this.id = this.template.name + "~" + idCounter;
      idCounter++;
      this.score = 0;
      this.program = this.template.program.slice();
    }

    return ProblemInstance;

  })();

  ProblemsManager = (function() {
    function ProblemsManager(problemNames) {
      var name, _i, _len, _ref;
      this.problemNames = problemNames;
      this.templates = {};
      _ref = this.problemNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        this.templates[name] = new ProblemTemplate(name);
      }
      this.instances = {};
    }

    ProblemsManager.prototype.newInstance = function(name) {
      var instance,
        _this = this;
      instance = new ProblemInstance(this.templates[name]);
      this.instances[instance.id] = {
        instance: instance,
        timeout: setTimeout((function() {
          return _this.removeInstance(instance.id);
        }), PROBLEM_TIMEOUT)
      };
      return instance;
    };

    ProblemsManager.prototype.getInstance = function(id) {
      if (this.instances[id] == null) {
        return null;
      }
      this.resetTimer(id);
      return this.instances[id].instance;
    };

    ProblemsManager.prototype.removeInstance = function(id) {
      clearTimeout(this.instances[id].timeout);
      return this.instances[id] = null;
    };

    ProblemsManager.prototype.resetTimer = function(id) {
      var instance,
        _this = this;
      instance = this.instances[id];
      clearTimeout(instance.timeout);
      return instance.timeout = setTimeout((function() {
        return _this.removeInstance(id);
      }), PROBLEM_TIMEOUT);
    };

    return ProblemsManager;

  })();

  problemsManager = new ProblemsManager(problemNames);

  Module.useExpressServer = function(app) {
    app.use("/debugger/js", express["static"](__dirname + "/js"));
    app.use("/debugger/less", express["static"](__dirname + "/less"));
    app.use("/debugger/images", express["static"](__dirname + "/images"));
    app.get("/debugger/problem/:problemName", function(req, res) {
      var instance;
      instance = problemsManager.newInstance(req.params.problemName);
      if (instance == null) {
        return res.send(400, "Problem not found");
      }
      return res.redirect("instance/" + instance.id);
    });
    app.get("/debugger/problem/:problemName/instance/:id", function(req, res) {
      var instance;
      instance = problemsManager.getInstance(req.params.problemid);
      if (instance == null) {
        return res.send(400, "Problem not found");
      }
      return res.render('index');
    });
    app.get("/debugger/newproblem", function(req, res) {
      var instance;
      if (req.query.problem == null) {
        return res.send(400, "No parameter problem found");
      }
      instance = problemsManager.newInstance(req.query.problem);
      return res.send(200, instance.id);
    });
    app.get("/debugger/:problemid/getinfo", function(req, res) {
      var instance;
      instance = problemsManager.getInstance(req.params.problemid);
      if (instance == null) {
        return res.send(400, "Problem not found");
      }
      return res.json(200, {
        name: instance.template.name
      });
    });
    return app.get("/debugger/:problemid/getsource", function(req, res) {
      var instance, line;
      instance = problemsManager.getInstance(req.params.problemid);
      if (instance == null) {
        return res.send(400, "Problem not found");
      }
      line = parseInt(req.query.line);
      if (line == null) {
        return res.send(400, "Line argument not found");
      }
      return res.send(200, (function() {
        var _i, _len, _ref, _results;
        _ref = instance.program.slice(line, line + 7);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          _results.push(line.toJson());
        }
        return _results;
      })());
    });
  };

}).call(this);

/*
//@ sourceMappingURL=server.map
*/
