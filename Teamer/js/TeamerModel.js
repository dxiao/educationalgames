// Generated by CoffeeScript 1.7.1
(function() {
  var Function, FunctionFamily, GameInfo, GameStatus, Implementation, Module, Player, PlayerView, ProblemRound, ProblemState, ProblemSuite, _,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Module = {};

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = Module;
    _ = require("./utils.coffee");
  } else {
    window.TeamerModel = Module;
    _ = window.Utils;
  }

  Module.Function = Function = (function() {
    function Function(name, family, description) {
      this.name = name;
      this.description = description;
      this.family = family.name;
      this.phase = family.phase;
    }

    return Function;

  })();

  Module.FunctionFamily = FunctionFamily = (function() {
    function FunctionFamily(name, phase, description) {
      this.name = name;
      this.phase = phase;
      this.description = description;
    }

    return FunctionFamily;

  })();

  Module.ProblemSuite = ProblemSuite = (function() {
    function ProblemSuite(name, functions) {
      this.name = name;
      this.functions = functions != null ? functions : {};
      this.functions = {};
      this.families = {};
    }

    ProblemSuite.prototype.addFunctions = function() {
      var func, functions, _i, _len, _results;
      functions = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = functions.length; _i < _len; _i++) {
        func = functions[_i];
        _results.push(this.functions[func.name] = func);
      }
      return _results;
    };

    ProblemSuite.prototype.addFamilies = function() {
      var fam, families, _i, _len, _results;
      families = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = families.length; _i < _len; _i++) {
        fam = families[_i];
        _results.push(this.families[fam.name] = fam);
      }
      return _results;
    };

    return ProblemSuite;

  })();

  Module.Implementation = Implementation = (function() {
    function Implementation(_function, user, code) {
      this["function"] = _function;
      this.user = user;
      this.code = code;
    }

    return Implementation;

  })();

  Module.ProblemRound = ProblemRound = (function() {
    function ProblemRound(problem, id) {
      this.problem = problem;
      this.id = id;
      this.players = {};
    }

    ProblemRound.prototype.addPlayer = function(player) {
      var _ref;
      if (_ref = player.name, __indexOf.call(this.players, _ref) < 0) {
        return this.players[player.name] = player;
      } else {
        throw new Error("Player already added to round!");
      }
    };

    return ProblemRound;

  })();

  Module.ProblemState = ProblemState = (function() {
    function ProblemState(problem, starttime) {
      this.problem = problem;
      this.starttime = starttime;
      this.implementations = {};
      this.feedback = {};
    }

    ProblemState.prototype.addImplementation = function(implementation) {};

    return ProblemState;

  })();

  Module.GameInfo = GameInfo = (function() {
    function GameInfo(gameName, gameStatus, families) {
      this.gameName = gameName;
      this.gameStatus = gameStatus;
      this.families = families;
    }

    GameInfo.fromJson = function(json) {
      return new GameInfo(json.gameName, GameStatus.fromJson(json.gameStage), json.families);
    };

    return GameInfo;

  })();

  Module.GameStatus = GameStatus = (function() {
    function GameStatus(gameStage, stageEnd) {
      this.gameStage = gameStage;
      this.stageEnd = stageEnd;
    }

    GameStatus.fromJson = function(json) {
      return new GameStatus(json.gameStage, json.stageEnd);
    };

    return GameStatus;

  })();

  Module.Player = Player = (function() {
    function Player(id, name) {
      this.id = id;
      this.name = name;
    }

    return Player;

  })();

  Module.PlayerView = PlayerView = (function() {
    function PlayerView(player, functions) {
      this.player = player;
      this.functions = functions;
      this.impl = {};
    }

    PlayerView.prototype.addImplementation = function(impl) {};

    PlayerView.prototype.toJson = function() {};

    PlayerView.fromJson = function(json) {};

    return PlayerView;

  })();

}).call(this);

//# sourceMappingURL=TeamerModel.map
